---
title: Bob's Burgers analysis
date: '`r format(as.Date("2024-11-24"), "%B %d, %Y")`'
---

```{r setup}
#| include: false
#| warning: false
#| echo: false

# Load libraries ----
library(tidyverse)
library(rvest)
library(ggridges)
library(kableExtra)

# Create empty data frame ----
bobs_burgers <- data.frame()

# For loop to get data for all seasons ----
#' NOTE: [in 2024-03-11 there are 14 seasons currently out there. Can I automate this?]
for (seasons in seq(from = 1, to = 14, by = 1)) {
 
  temp <- 
    read_html(paste0(
    "https://www.imdb.com/title/tt1561755/episodes/?season=",
    seasons
  )) |> # URL
    html_nodes("div") |> # pick up this html node // is there a better way to do this?
    html_text() |> # return html text
    as_tibble_col(column_name = "col1") |> # force into data frame
    mutate(col1 = sub("Top-rated", "", col1)) |> # remove this tag, otherwise we'll be missing episode names
    filter(grepl("^S[0-9].*", col1)) |> # keep episode information
    distinct() |> # keep only distinct rows
    mutate(ep_no = as.integer(sub(".*E(.*) ∙.*", "\\1", col1))) |> # create variable
    group_by(ep_no) |> # group by episode name
    distinct(ep_no, .keep_all = TRUE) |> # only keep unique rows (first appearing has all the information)
    ungroup() |> # ungroup
    mutate(
      col1 = gsub(".{4}$", "", col1),
      season_no = as.integer(seasons),
      rating = as.numeric(sub(".*([0-9]\\.[0-9])/10.*", "\\1", col1)),
      rate_count_temp = sub(".*\\((.*)\\).*", "\\1", col1),
      rate_count_temp = gsub("\\.", "", rate_count_temp),
      rate_count = ifelse(
        grepl("K$", rate_count_temp),
        as.integer(sub("K", "", rate_count_temp)) * 100,
        rate_count_temp
      ),
      rate_count = as.integer(rate_count),
      temp = sub(".* ∙ ", "", col1),
      ep_title = sub("Sat,.*|Sun,.*|Mon,.*|Tue,.*", "", temp),
      temp_date = gsub(".*Sat,|.*Sun,|.*Mon,|.*Tue,", "\\1", temp),
      date = as.Date(trimws(paste0(
        sub("[0-9]{4}.*", "\\1", temp_date),
        str_extract(temp_date, "\\d{4}")
      )), "%b %d, %Y"),
      temp2 = sub(".*Sat, |.*Sun, |.*Mon, |.*Tue, ", "", temp),
      temp_description = sub("^(.*\\d{4})", "", temp2),
      description = sub("\\.[0-9].*", "", temp_description)
    ) |>
    select(-c(col1, temp, temp2, temp_date, temp_description, rate_count_temp)) |> 
    as.data.frame()
 
 bobs_burgers <-
  bind_rows(
   bobs_burgers,
   data.frame(
    temp,
    stringsAsFactors = FALSE
   )
  )
 
}

rm(seasons, temp)

# Palette ----
# #f0262a : red
# #f172a9 : pink
# #95d244 : green
# #fcdd60 : yellow
# #9ac7e8 : baby blue 

## Episodes per season ----
n_eps <- 
  bobs_burgers |> 
  count(season_no)

knitr::opts_chunk$set(echo =  FALSE, warning = FALSE, message = FALSE)
```

Bob's Burgers is a great comfort show of mine. There's something endearing about a show about a goofy family. Since I love this show so much, I figured why not mix in data analysis and get the best of both worlds? So get ready to go on this Bob's Burgers analysis in brief with me!

::: {.callout-tip}
So you don't need to watch the show to get this but it's a great show so I'd just recommend giving it a watch anyways.
:::

## Number of episodes per season

```{r no_eps}
#| out-width: 100%
ggplot(n_eps, 
       aes(
         x = reorder(as.character(season_no), season_no), 
         y = n)) +
  geom_bar(stat = "identity", position = "dodge", fill = "#f0262a") +
  geom_hline(yintercept = mean(n_eps$n), size = 1) +
  theme_bw() +
  annotate(
    "text",
    x = 4,
    y = mean(n_eps$n) + 0.75,
    label = paste0("Average number of episodes in a season: ", round(mean(n_eps$n), 2)),
    size = 3
  ) +
  labs(title = "Count of episodes per season",
       x = "Season",
       y = "Count") 
```

This was just to take a quick peak at if we could compare the episodes over seasons. What jumps out is that seasons 1 & 2 are fairly short. It's reasonable for pilot seasons to be shorter but a quick search shows that there were fewer episodes in season 2 due to a schedule conflict[^1]. We also see a slight dip in season 14 and that's likely a result of the SAG-AFTRA writer's strike in 2023[^2].

[^1]: [Why Bob’s Burgers Season 2 Is So Short](https://screenrant.com/why-is-bobs-burgers-season-2-short/)

[^2]: [Fox Reveals Fall Premiere Dates, Including the Return of ‘9-1-1: Lone Star’ After Its Strike-Induced 15-Month Hiatus](https://variety.com/2024/tv/news/fox-fall-premiere-dates-2024-9-1-1-lone-star-1236074450/)

## Ratings 

### Frequency of ratings

::: {.panel-tabset}

#### All episodes

```{r ratings_all}
#| out-width: 100%
ggplot(bobs_burgers, aes(x = rating)) +
 geom_histogram(fill = "#95d244") +
 theme_bw() +
 labs(title = "Frequency of ratings",
    x = "Rating out of 10",
    y = "Count") 
```

##### Summary

```{r ratings_summary}
#| out-width: 100%
summary(bobs_burgers$rating)
```

We can see from the histogram and summary that most Bob's Burgers episodes clock in at a 7.7/10 rating.

#### By season

::: {.panel-tabset}

##### Facet wrap

```{r byseason_facet}
#| out-width: 100%
ggplot(bobs_burgers, aes(x = rating)) +
 geom_histogram(fill = "#fcdd60") +
 theme_bw() +
 labs(title = "Frequency of ratings",
    x = "Rating out of 10",
    y = "Count") +
 facet_wrap(~season_no)
```

And of course, why not break down the ratings by season? But I find it kind of difficult to compare the rating of the seasons against one another ... maybe there's a better way to see it?

##### Ridgeline

```{r byseason_ridgeline}
#| out-width: 100%
ggplot(bobs_burgers, aes(x = rating, y = season_no, fill = as.character(season_no))) +
  geom_density_ridges(alpha = 0.6, stat = "binline", bins = 15) +
  theme_ridges() +
  theme(legend.position = "none")
 labs(title = "Frequency of ratings",
    x = "Rating out of 10",
    y = "Count") +
 facet_wrap(~season_no)
```

Oh, look at that! In this kind of graph we can see that the distribution of ratings starts to move lower in the later seasons but we can also see very highly rated episodes in seasons 13 and 14.

:::

:::

### Ratings over time

::: {.panel-tabset}

#### By release date

::: {.panel-tabset}

##### Line graph

```{r all_line}
#| out-width: 100%
ggplot(
  bobs_burgers, 
  aes(x = date, y = rating))+
  geom_line(
    group = 1,
    color = "#f0262a") +
  theme_bw() +
  labs(title = "Ratings over time by episode",
       x = "Episode number",
       y = "Rating") 
```

This graph looks a little too busy. The other downside with this graph is that it's hard to tell when a season starts and ends.

##### Scatter plot and average

```{r ratings_avg}
#| out-width: 100%
ggplot(bobs_burgers, aes(x = date, y = rating)) +
  geom_point(color = "#9ac7e8") +
  geom_hline(
    size = 1,
    aes(yintercept = mean(rating))) +
  annotate(
    "text",
    x = as.Date("2023-10-01"),
    y = mean(bobs_burgers$rating) + 0.1,
    label = paste0("Average rating: ", round(mean(bobs_burgers$rating), 2)),
    size = 3
  ) +
  theme_bw() +
  labs(title = "Ratings over time", x = "Release date", y = "Rating")
```

We also love a scatter plot when there's a lot of data points. Here, we see more clumps above the average in the earlier seasons and that they move more under the average in the later seasons. This aligns with the story we see in the ridgeline graph--which makes sense because it's all the same data.

##### Scatter plot and trend

```{r ratings_trend}
#| out-width: 100%
ggplot(bobs_burgers, aes(x = date, y = rating)) +
  geom_point(color = "#9ac7e8") +
  geom_smooth(
    method = "lm",
    formula = y ~ x,
    colour = "black"
  ) +
  theme_bw() +
  labs(title = "Ratings over time and trend", x = "Release date", y = "Rating")
```

And here, by adding a fitted linear model, the trend seen in the previous graph is made more apparent.

:::

#### By episode number and season

```{r byseason_line}
#| out-width: 100%
ggplot(
  bobs_burgers, 
  aes(x = ep_no, y = rating))+
  geom_line(
    group = 1,
    color = "#f172a9") +
  theme_bw() +
  facet_wrap(. ~ season_no, scales = "free") +
  labs(title = "Ratings over time by episode",
       x = "Episode number",
       y = "Rating") 
```

I figured changing the perspective from release date to episode might show some sort of pattern, e.g., season premieres or finales scoring higher--[spoiler it doesn't seem so](#was-this-episode-a-season-finale). I also figured this would remove the space when there's breaks between when episodes are released.

:::

Of the 14 seasons of Bob's Burgers, there are `r length(unique(bobs_burgers$ep_title))` episodes. I'm going to now look at the bottom and top 25 episodes. I recognize that it's only `r round(25/275, 2) * 100`% of the episodes but for now this is just a quick look. 

## Bottom 25 rated episodes

```{r bottom}
#| include: false
bottom_eps <- 
  bobs_burgers |> 
  slice_min(rating, n = 25)
```

```{r bottom_plot}
#| out-width: 100%
ggplot(
  bottom_eps, aes(
    x = rating,
    y = reorder(ep_title, rating),
    fill = reorder(as.character(season_no), season_no)
  )) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_bw() +
  scale_y_discrete(breaks = unique(bottom_eps$ep_title)) +
  labs(title = "Bottom 25 rated episodes",
       x = "Rating",
       y = "Episode title",
       fill = "Season") 
```

Unsurprisingly, from what we seen in the graphs above we have some repeate offenders from the later seasons showing up in the bottom 25 rated episodes.

## Top 25 rated episodes

```{r top}
#| include: false
top_eps <- 
  bobs_burgers |> 
  slice_max(rating, n = 25)
```

```{r top_plot}
#| out-width: 100%
ggplot(
  top_eps, aes(
    x = rating,
    y = reorder(ep_title, rating),
    fill = reorder(as.character(season_no), season_no)
  ))+
  geom_bar(stat = "identity", position = "dodge") +
  theme_bw() +
  scale_y_discrete(breaks = unique(top_eps$ep_title)) +
  labs(title = "Top 25 rated episodes",
       x = "Rating",
       y = "Episode title",
       fill = "Season")
```

However, it seems like a whole mixed bag in the top 25. 

::: {.callout collapse="true"}
## Hmmm ...

I do have some suspicions about the highest rated episode. In my opinion, this is by far not the best episode. Additionally, I would rank Thanksgiving episodes above the Christmas episodes. I might even rank the Halloween episodes above the Christmas ones ... maybe this needs more investigation.
:::

### Was this episode a season finale?

```{r finale_flag}
#| include: false
per_top <-
  left_join(
    x = top_eps,
    y = {
      bobs_burgers |> 
        group_by(season_no) |> 
        mutate(
          season_finale = max(ep_no),
          season_finale_flag = ifelse(ep_no == max(ep_no), TRUE, FALSE)) |> 
        ungroup() |> 
        select(ep_title, season_finale, season_finale_flag)
    },
    by = "ep_title"
  )
```

```{r same_finale}
#| out-width: 100%
ggplot(
  per_top, aes(
    x = rating,
    y = reorder(ep_title, rating),
    fill = season_finale_flag)
  ) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_bw() +
  scale_y_discrete(breaks = unique(per_top$ep_title)) +
  scale_fill_manual(values = c("#f172a9", "#9ac7e8")) + 
  labs(x = "Rating",
       y = "Episode title",
       fill = "Season\nfinale\nflag")
```

I always just figured shows like to start off with a bang or end on a great note but maybe that's not the case. This graph only particularly looked at whether the episode was a season finale and this was a surprising find to me. But it's not like I'm right often enough anyways.

### Count of ratings

```{r count_ratings}
#| out-width: 100%
ggplot(
  per_top, aes(
    x = rate_count,
    y = reorder(ep_title, rating),
  )) +
  geom_bar(stat = "identity", position = "dodge", fill = "#f0262a") +
  theme_bw() +
  scale_y_discrete(breaks = unique(per_top$ep_title)) +
  scale_fill_manual(values = c("#f172a9", "#9ac7e8")) + 
  labs(x = "Approximate rate count",
       y = "Episode title")
```

::: {.callout-caution}
The reason is that it's approximate is because you can't see the raw rating counts. For example, you would see 2.7K instead of say 2,794 or whatever so take this graph with a grain of salt because that's all that was available to me.
:::

So my first thought see the top rated episode and that it was in a later season was that maybe there were fewer ratings and that skewered the average. But here, we see that it was the most rated episode!

![](https://i.kym-cdn.com/photos/images/original/000/645/713/888.jpg)

## My personal top 25 episodes

So now that I've seen the top 25 top rated episodes, of course now I'm like ... do I fit into an average rater of Bob's Burgers? I picked my top 25 episodes, in no particular order and see how they compare.

```{r my_favs}
#| include: false
my_favs <-
  bobs_burgers |>
  filter(
    (season_no == 1 & ep_no == 4) |
      (season_no == 2 & ep_no %in% c(2, 4)) |
      (season_no == 3 & ep_no %in% c(3, 4, 7, 12, 19, 21, 22, 23)) |
      (season_no == 4 & ep_no %in% c(3, 5, 12, 14, 17)) |
      (season_no == 5 & ep_no %in% c(1, 4, 18, 21)) |
      (season_no == 6 & ep_no %in% c(3, 8, 19)) |
      (season_no == 7 & ep_no %in% c(5, 15))
  )

over_under <-
  my_favs |>
  select(-c(date, description)) |>
  mutate(
    quantile_3 = ifelse(rating >= quantile(bobs_burgers$rating)[4], TRUE, FALSE),
    top_25 = ifelse(ep_title %in% top_eps$ep_title, TRUE, FALSE)
  )
```

::: {.panel-tabset}

### Do they fit into the top 25 rated episodes?

```{r my_favs_top}
#| out-width: 100%
ggplot(
  over_under, 
  aes(x = rating,
      y = reorder(ep_title, rating),
      fill = top_25)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("#fcdd60", "#95d244")) +
  theme_bw() +
  labs(
    title = "Comparing my top 25 episodes to all rated episodes",
    x = "Rating",
    y = "Episode title",
    fill = "Is this episode\nin the top 25 of\ntop rated\nepisodes?"
  )
```

What?! Roughly only half of my top 25 is in the top 25 rated? Ok, but let's be real Work Hard or Die Trying, Girl has the musical stylings of Carly Simon. CARLY SIMON. I may be blinded by my love of Working Girl and Die Hard and any Bob's Burgers musical episodes but this hit home to me and is in my constant rerun rotation. If I don't get off this rant we won't get anywhere so let's move on.

###  Do they fit into the 3rd quantile?

```{r my_favs_plot}
#| out-width: 100%
ggplot(
  over_under, 
  aes(x = rating,
      y = reorder(ep_title, rating),
      fill = quantile_3)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_vline(xintercept = mean(bobs_burgers$rating), size = 1) +
  annotate(
    "text",
    x = mean(bobs_burgers$rating) - 0.95,
    y = 25,
    label = paste0("Mean: ", round(mean(
      bobs_burgers$rating
    ), 2)),
    size = 3
  ) +
  scale_fill_manual(values = c("#fcdd60", "#95d244")) +
  theme_bw() +
  labs(
    title = "Comparing my top 25 episodes to all rated episodes",
    x = "Rating",
    y = "Episode title",
    fill = "Is this episode\nin the 3rd\nquantile of\ntop rated\nepisodes?"
  )
```

Ok, this makes me feel like I'm only off slightly. And that's fine! If we all fit the same mould or all liked the same things we'd all be boring. But it is good to see I'm not out to lunch here. Realy quick though, Family Fracas is a great episode. How else would we have gotten this great gem:

![](https://www.reddit.com/r/funny/comments/29j14p/dont_mess_with_tina/#lightbox)

:::

## Final thoughts ...

By the end of the day, this is a skewed sample of people who would 1. Most likely enjoy watching Bob's Burgers and 2. Rate episodes on IMDB so that's something to keep in mind. It was fun nonetheless to work at some very basic webscraping to pull the data from IMDB, then clean it all up so it was easier to analyze and make these (in my opinion) very beautiful graphs. I guess ... you just have to watch Bob's Burgers to get your own opinion. Happy watching!
